# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  flask-app:
    container_name: flask
    command: ./start.sh
    restart: unless-stopped
    working_dir: /app
    build:
      context: .
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  nginx:
    image: nginx:stable-perl
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      flask-app:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

  db:
    image: postgres
    container_name: db
    restart: always
    secrets:
      - db-password
    volumes:
      - db-data-prod:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  default:
    name: backend-network

volumes:
  db-data-prod:
    name: db-prod
secrets:
  db-password:
    file: db/password.txt

